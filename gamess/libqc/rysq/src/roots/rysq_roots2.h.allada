// -*- C++ -*-

#ifndef _RYSQ_ROOTS2_H
#define _RYSQ_ROOTS2_H

#include <math.h>
#include <stdio.h>

#ifdef __CUDACC__
#define decls __device__
#else
#define decls static inline
#endif

#define r12 .275255128608411
#define pie4 .785398163397448
#define r22 2.72474487139158
#define w22 .0917517095361369
#define r13 .190163509193487
#define r23 1.78449274854325
#define w23 .177231492083829
#define r33 5.52534374226326
#define w33 .00511156880411248

decls void Ghondo_roots2_x40toINF(double const X, double *t2, double *W);
decls void Ghondo_roots2_x33to40(double const X, double *t2, double *W);
decls void Ghondo_roots2_x15to33(double const X, double *t2, double *W);
decls void Ghondo_roots2_x10to15(double const X, double *t2, double *W);
decls void Ghondo_roots2_x5to10(double const X, double *t2, double *W);
decls void Ghondo_roots2_x3to5(double const X, double *t2, double *W);
decls void Ghondo_roots2_x1to3(double const X, double *t2, double *W);
decls void Ghondo_roots2_x0to1(double const X, double *t2, double *W);

decls void Rysq_roots2(double const X, double *t2, double *W) {
  
    if (X > 40.) {
	Ghondo_roots2_x40toINF(X, t2, W);
    }
    else if (X > 33.) {
	Ghondo_roots2_x33to40(X, t2, W);
    }
    else if (X > 15.) {
	Ghondo_roots2_x15to33(X, t2, W);
    }  
    else if (X > 10.) {
	Ghondo_roots2_x10to15(X, t2, W);
    }
    else if (X > 5.) {
	Ghondo_roots2_x5to10(X, t2, W);
    }
    else if (X > 3.) {
	Ghondo_roots2_x3to5(X, t2, W);
    }
    else if (X > 1.) {
	Ghondo_roots2_x1to3(X, t2, W);
    }
    else if (X > 3.0e-7) {
	Ghondo_roots2_x0to1(X, t2, W);
    }
    else {
    /*     X IS APPROXIMATELY ZERO.         NROOTS=2 */
    t2[0] = .130693606237085 - X * .0290430236082028;
    t2[1] = 2.86930639376291 - X * .637623643058102;
    W[0] = .652145154862545 - X * .122713621927067;
    W[1] = .347854845137453 - X * .210619711404725;
    }

    for(int i = 0; i < 2; ++i) {
	t2[i] = t2[i]/(1.0 + t2[i]);
    }

    return;
}

decls void Ghondo_roots2_x40toINF(double const X, double *t2, double *W) {
    W[0] = sqrt(pie4 / X);
    t2[0] = r12 / (X - r12);
    t2[1] = r22 / (X - r22);
    W[1] = w22 * W[0];
    W[0] -= W[1];
}

decls void Ghondo_roots2_x33to40(double const X, double *t2, double *W) {
    W[0] = sqrt(pie4 / X);
    double e = exp(-X);
    t2[0] = (X * -.87894730749888 + 10.9243702330261) * e + r12 / (
								   X - r12);
    t2[1] = (X * -9.28903924275977 + 81.0642367843811) * e + r22 / (
								    X - r22);
    W[1] = (X * 4.468573893084 - 77.9250653461045) * e + w22 * W[0];
    W[0] -= W[1];
}

decls void Ghondo_roots2_x15to33(double const X, double *t2, double *W) {
    double e = exp(-X);
    W[0] = ((.1962326414943 / X - .4969524146449) / X - 
	    6.0156581186481e-5) * e + sqrt(pie4 / X);
    double f1 = (W[0] - e) / (X + X);
    
    t2[0] = ((((X * -1.14906395546354e-6 + 1.76003409708332e-4) * 
	       X - .0171984023644904) * X - .137292644149838) * 
	     X + (-47.5742064274859 / X + 9.21005186542857) / 
	     X - .0231080873898939) * e + r12 / (X - r12);
    
    t2[1] = (((X * 3.64921633404158e-4 - .0971850973831558) * X 
	      - 4.02886174850252) * X + (-135.831002139173 / X - 
					 86.6891724287962) / X + 2.98011277766958) * e + r22 / (
												X - r22);
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

decls void Ghondo_roots2_x10to15(double const X, double *t2, double *W) {
    double e = exp(-X);
    W[0] = (((-.18784686463512 / X + .22991849164985) / X - 
	     .49893752514047) / X - 2.1916512131607e-5) * e + sqrt(pie4 
								   / X);
    double f1 = (W[0] - e) / (X + X);
      
    t2[0] = ((((X * -1.01041157064226e-5 + .00119483054115173) * 
	       X - .0673760231824074) * X + 1.25705571069895) * 
	     X + (((-8576.09422987199 / X + 5910.05939591842) / 
		   X - 1708.07677109425) / X + 264.536689959503) / 
	     X - 23.8570496490846) * e + r12 / (X - r12);

    
    
    t2[1] = (((X * 3.39024225137123e-4 - .0934976436343509) * X 
	      - 4.2221648330632) * X + (((-2084.57050986847 / X - 
					  1049.99071905664) / X + 339.891508992661) / X - 
					156.184800325063) / X + 8.00839033297501) * e + r22 / (
											       X - r22);
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

decls void Ghondo_roots2_x5to10(double const X, double *t2, double *W) {
    double e = exp(-X);

	
    W[0] = ((((((.46897511375022 / X - .69955602298985) / X + 
		.53689283271887) / X - .32883030418398) / X + 
	      .24645596956002) / X - .49984072848436) / X - 
	    3.1501078774085e-6) * e + sqrt(pie4 / X);

    double f1 = (W[0] - e) / (X + X);

    double y = X - 7.5;
    
    t2[0] = (((((((((((((y * -1.43632730148572e-16 + 2.38198922570405e-16) * y 
			+ 1.3583196188e-14) * y - 7.064522786879e-14) * y - 
		      7.719300212748e-13) * y + 7.802544789997e-12) * y + 
		    6.628721099436e-11) * y - 1.775564159743e-9) * y + 
		  1.71382882399e-8) * y - 1.497500187053e-7) * y + 
		2.283485114279e-6) * y - 3.76953869614706e-5) * y + 
	      4.74791204651451e-4) * y - .00460448960876139) * y + 
	.0372458587837249;


    t2[1] = ((((((((((((y * 2.487916227989e-14 - 1.36113510175724e-13) * y - 
		       2.224334349799e-12) * y + 4.190559455515e-11) * y - 
		     2.222722579924e-10) * y - 2.624183464275e-9) * y + 
		   6.128153450169e-8) * y - 4.383376014528e-7) * y - 
		 2.4995220023291e-6) * y + 1.0323664788832e-4) * y - 
	       .00144614664924989) * y + .0135094294917224) * y - 
	     .0953478510453887) * y + .54476524568679;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}


decls void Ghondo_roots2_x3to5(double const X, double *t2, double *W) {
    double y = X - 4.;
    double f1 = ((((((((((y * -2.62453564772299e-11 + 3.24031041623823e-10) * y - 
			 3.614965656163e-9) * y + 3.760256799971e-8) * y - 
		       3.553558319675e-7) * y + 3.022556449731e-6) * y - 
		     2.290098979647e-5) * y + 1.526537461148e-4) * y - 
		   8.81947375894379e-4) * y + .00433207949514611) * y - 
		 .0175257821619926) * y + .0528406320615584;
    W[0] = (X + X) * f1 + exp(-X);

    t2[0] = ((((((((y * -4.11560117487296e-12 + 7.10910223886747e-11) * y - 
		   1.73508862390291e-9) * y + 5.93066856324744e-8) * y - 
		 9.76085576741771e-7) * y + 1.08484384385679e-5) * y - 
	       1.12608004981982e-4) * y + .00116210907653515) * y - 
	     .00989572595720351) * y + .0612589701086408;
    t2[1] = (((((((((y * -1.80555625241001e-10 + 5.44072475994123e-10) * y + 
		    1.60349804524e-8) * y - 1.497986283037e-7) * y - 
		  7.017002532106e-7) * y + 1.85882653064034e-5) * y - 
		2.04685420150802e-5) * y - .00249327728643089) * y + 
	      .0356550690684281) * y - .260417417692375) * y + 1.12155283108289;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}


decls void Ghondo_roots2_x1to3(double const X, double *t2, double *W) {
    double y = X - 2.;
    double f1 = ((((((((((y * -1.61702782425558e-10 + 1.96215250865776e-9) * y - 
			 2.14234468198419e-8) * y + 2.17216556336318e-7) * y - 
		       1.98850171329371e-6) * y + 1.62429321438911e-5) * y - 
		     1.16740298039895e-4) * y + 7.24888732052332e-4) * y - 
		   .00379490003707156) * y + .0161723488664661) * y - 
		 .0529428148329736) * y + .115702180856167;
    W[0] = (X + X) * f1 + exp(-X);

    t2[0] = (((((((((y * -6.36859636616415e-12 + 8.4741706477627e-11) * y - 
		    5.152207846962e-10) * y - 3.846389873308e-10) * y + 
		  8.47225338838e-8) * y - 1.85306035634293e-6) * y + 
		2.47191693238413e-5) * y - 2.49018321709815e-4) * y + 
	      .00219173220020161) * y - .0163329339286794) * y + 
	.0868085688285261;
    t2[1] = (((((((((y * 1.45331350488343e-10 + 2.07111465297976e-9) * y - 
		    1.878920917404e-8) * y - 1.725838516261e-7) * y + 
		  2.247389642339e-6) * y + 9.76783813082564e-6) * y - 
		1.93160765581969e-4) * y - .00158064140671893) * y + 
	      .0485928174507904) * y - .430761584997596) * y + 1.8040097453795;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

decls void Ghondo_roots2_x0to1(double const X, double *t2, double *W) {
    double f1 = ((((((((X * -8.36313918003957e-8 + 1.21222603512827e-6) * 
		       X - 1.15662609053481e-5) * X + 9.25197374512647e-5) 
		     * X - 6.40994113129432e-4) * X + .00378787044215009)
		   * X - .0185185172458485) * X + .0714285713298222) *
		 X - .199999999997023) * X + .333333333333318;
    W[0] = (X + X) * f1 + exp(-X);

    t2[0] = (((((((X * -2.35234358048491e-9 + 2.49173650389842e-8) * 
		  X - 4.558315364581e-8) * X - 2.447252174587e-6) * 
		X + 4.743292959463e-5) * X - 5.33184749432408e-4) * 
	      X + .00444654947116579) * X - .0290430236084697) * 
	X + .130693606237085;
    t2[1] = (((((((X * -2.4740490232917e-8 + 2.36809910635906e-7) * 
		  X + 1.83536773631e-6) * X - 2.066168802076e-5) * 
		X - 1.345693393936e-4) * X - 5.88154362858038e-5) * 
	      X + .0532735082098139) * X - .637623643056745) * 
	X + 2.86930639376289;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}


// Parallel version 

static double T20_33_40[] = { 10.9243702330261,
			      -.87894730749888 };

static double T21_33_40[] = {  81.0642367843811,
			       -9.28903924275977 };

decls void Rysq_roots2_x33to40(double const X, double *t2, double *W) {
    W[0] = sqrt(pie4 / X);
    double e = exp(-X);
    
    t2[0] = 0.0;
    t2[1] = 0.0;
    double xi = 1.0;
    for(int i = 0; i < sizeof(T20_33_40)/sizeof(double); ++i) {
	t2[0] = xi*T20_33_40[i];
	t2[1] = xi*T21_33_40[i];
	xi *= X;
    }
    t2[0] = t2[0]*e + r12/(X - r12);
    t2[1] = t2[1]*e + r22/(X - r22);
    
    W[1] = (X * 4.468573893084 - 77.9250653461045) * e + w22 * W[0];
    W[0] -= W[1];
}


static const double C15_33[] = { .1962326414943,
				 -.4969524146449,
				 6.0156581186481e-5 };

static const double T20_15_33[] = { -47.5742064274859,
				    9.21005186542857,
				    -.0231080873898939,
				    -.137292644149838,
				    -.0171984023644904,
				    1.76003409708332e-4,
				    -1.14906395546354e-6 };

static const double T21_15_33[] = { -135.831002139173,
				    -86.6891724287962,
				    2.98011277766958,
				    -4.02886174850252,
				    -.0971850973831558,
				    3.64921633404158e-4 };

decls void Rysq_roots2_x15to33(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    W[0] = 0.0;
    t2[0] = 0.0;
    t2[1] = 0.0;
    
    double invx2 = pow(X, -2);
    double xi = invx2;
    for(int i = 0; i < sizeof(C15_33)/sizeof(double); ++i) {
	W[0] += xi*C15_33[i];
	xi *= X;
    }
    W[0] = W[0]*e + sqrt(pie4/X);
    double f1 = (W[0] - e)/x2;
    
    xi = invx2;
    for(int i = 0; i < sizeof(T20_15_33)/sizeof(double); ++i) {
	t2[0] += xi * T20_15_33[i];
	t2[1] += xi * T21_15_33[i];
	xi *= X;
    }
    
    t2[0] = t2[0]*e + r12/(X - r12);
    t2[1] = t2[1]*e + r22/(X - r22);
    
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

static const double C10_15[] = { -.18784686463512, 
				 .22991849164985, 
				 -.49893752514047,
				 -2.1916512131607e-5 };

// t2[0] coeffs  for (x^-4 to x^4)
static const double T20_10_15[] = { -8576.09422987199,
				    5910.05939591842, 
				    -1708.07677109425, 
				    264.536689959503, 
				    -23.8570496490846, 
				    1.25705571069895, 
				    -.0673760231824074,
				    .00119483054115173,
				    -1.01041157064226e-5 };

//t2[1] coeffs for (x^-4 to x^3), padded extra zero
static const double T21_10_15[] = { -2084.57050986847, 
				    -1049.99071905664,  
				    339.891508992661, 
				    -156.184800325063, 
				    8.00839033297501, 
				    -4.2221648330632, 
				    -.0934976436343509,  
				    3.39024225137123e-4, 
				    0.00000000000000000 };


decls void Rysq_roots2_x10to15(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    double invx4 = pow(X, -4);    
    
    W[0] = 0.0;
    t2[0] = 0.0; 
    t2[1] = 0.0; 
    
    //    double xi = X*invx4;
    double xi = pow(X, -3);
    for(int i = 0; i < sizeof(C10_15)/sizeof(double); ++i) {
	W[0] += xi * C10_15[i];
	xi *= X;
    }
    W[0] = W[0]*e + sqrt(pie4/X);
    double f1 = (W[0] - e)/x2;
    
    xi = invx4;
    for(int i = 0; i < sizeof(T20_10_15)/sizeof(double); ++i) {
	t2[0] += xi*T20_10_15[i];
	t2[1] += xi*T21_10_15[i];
	xi *= X;
    }
    t2[0] = t2[0]*e + r12 / (X - r12);
    t2[1] = t2[1]*e + r22 / (X - r22);
    
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

static const double C5_10[] = { .46897511375022, 
				-.69955602298985,
				.53689283271887,			
				-.32883030418398,
				.24645596956002,
				-.49984072848436,
				3.1501078774085e-6 };

static const double T20_5_10[] = {  .0372458587837249,
				    -.00460448960876139,
				    4.74791204651451e-4,
				    -3.76953869614706e-5,
				    2.283485114279e-6,
				    -1.497500187053e-7,
				    1.71382882399e-8,
				    -1.775564159743e-9,
				    6.628721099436e-11,
				    7.802544789997e-12,
				    -7.719300212748e-13,
				    -7.064522786879e-14,
				    1.3583196188e-14,
				    2.38198922570405e-16,
				    -1.43632730148572e-16 };

static const double T21_5_10[] = { .54476524568679,
				   -.0953478510453887,
				   .0135094294917224,
				   -.00144614664924989,
				   1.0323664788832e-4,
				   -2.4995220023291e-6,
				   -4.383376014528e-7,
				   6.128153450169e-8,
				   -2.624183464275e-9,
				   -2.222722579924e-10,
				   4.190559455515e-11,
				   -2.224334349799e-12,
				   -1.36113510175724e-13,
				   2.487916227989e-14, 
				   0.000000000000000 };

decls void Rysq_roots2_x5to10(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    W[0] = 0.0;
    double xi = pow(X, -6);
    for(int i = 0; i < sizeof(C5_10)/sizeof(double); ++i) {
	W[0] += xi*C5_10[i];
	xi *= X;
    }

    W[0] = W[0]*e + sqrt(pie4/X);
    double f1 = (W[0] - e) / x2;
    
    double y = X - 7.5;
    double yi = 1.0;
    for(int i = 0; i < sizeof(T20_5_10)/sizeof(double); ++i) {
	t2[0] += yi*T20_5_10[i];
	t2[1] += yi*T21_5_10[i];
	yi *= y;
    }
    
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

// f1 coefficients , size 12
static const double C3_5[] = { .0528406320615584,
			       -.0175257821619926,
			       .00433207949514611,
			       -8.81947375894379e-4,
			       1.526537461148e-4,
			       -2.290098979647e-5,
			       3.022556449731e-6,
			       -3.553558319675e-7,
			       3.760256799971e-8,
			       -3.614965656163e-9,
			       3.24031041623823e-10,
			       -2.62453564772299e-11 };

// t2[0] coefficients, size 11, padded 0.0000 to merge the t2 loops
static const double T20_3_5[] = { .0612589701086408,
				  -.00989572595720351,
				  .00116210907653515,
				  -1.12608004981982e-4,
				  1.08484384385679e-5,
				  -9.76085576741771e-7,
				  5.93066856324744e-8,
				  -1.73508862390291e-9,
				  7.10910223886747e-11,
				  -4.11560117487296e-12, 
				  0.0000000000000000};

// t2[1] coefficients, size 11
static const double T21_3_5[] = { 1.12155283108289,
				  -.260417417692375,
				  .0356550690684281,
				  -.00249327728643089,
				  -2.04685420150802e-5,
				  1.85882653064034e-5,
				  -7.017002532106e-7,
				  -1.497986283037e-7,
				  1.60349804524e-8,
				  5.44072475994123e-10,
				  -1.80555625241001e-10 };

decls void Rysq_roots2_x3to5(double const X, double *t2, double *W) {
    
    double y = X - 4.;
    double x2 = X + X;
    double e = exp(-X);
    
    double f1 = 0.0;
    
    t2[0] = 0.0;
    t2[1] = 0.0;
    
    double yi = 1.0;
     for(int i = 0; i < sizeof(C3_5)/sizeof(double); ++i) {
 	f1 += yi*C3_5[i];
	yi *= y;
     }
    
    yi = 1.0;
    for(int i = 0; i < sizeof(T20_3_5)/sizeof(double); ++i) {
	t2[0] += yi*T20_3_5[i];
	t2[1] += yi*T21_3_5[i];
	yi *= y;
    }

    W[0] = x2*f1 + e;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

// f1 coeffs, size 12
static const double C1_3[] = { .115702180856167,
			-.0529428148329736,
			.0161723488664661,
			-.00379490003707156,
			7.24888732052332e-4,
			-1.16740298039895e-4,
			1.62429321438911e-5,
			-1.98850171329371e-6,
			2.17216556336318e-7,
			-2.14234468198419e-8,
			1.96215250865776e-9,
			-1.61702782425558e-10 };

// t2[0] coeffs, size 11
static const double T20_1_3[] = { .0868085688285261,
			   -.0163329339286794,
			   .00219173220020161,
			   -2.49018321709815e-4,
			   2.47191693238413e-5,
			   -1.85306035634293e-6,
			   8.47225338838e-8,
			   -3.846389873308e-10,
			   -5.152207846962e-10,
			   8.4741706477627e-11,
			   -6.36859636616415e-12 };

// t2[1] coeffs, size 
static const double T21_1_3[] = { 1.8040097453795,
			   -.430761584997596,
			   .0485928174507904,
			   -.00158064140671893,
			   -1.93160765581969e-4,
			   9.76783813082564e-6,
			   2.247389642339e-6,
			   -1.725838516261e-7,
			   -1.878920917404e-8,
			   2.07111465297976e-9,
			   1.45331350488343e-10 };

decls void Rysq_roots2_x1to3(double const X, double *t2, double *W) {
    double y = X - 2.;
    double x2 = X + X;
    double e = exp(-X);
    
    double f1 = 0.0;
    t2[0] = 0.0;
    t2[1] = 0.0;
    
    double yi = 1.0;
    for (int i = 0; i < sizeof(C1_3)/sizeof(double); ++i) {
	f1 += yi*C1_3[i];
	yi *= y;
    }
    
    yi = 1.0;
    for (int i = 0; i < sizeof(T20_1_3)/sizeof(double); ++i) {
	t2[0] += yi*T20_1_3[i];
	t2[1] += yi*T21_1_3[i];
	yi *= y;
    }

    W[0] = x2*f1 + e;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}    

// f1 coefficients stored in an array of size 10
static const double C0_1[] = { 0.333333333333318,
			       -0.199999999997023,
			       0.071428571329822,
			       -0.0185185172458485,
			       0.0037878704421500,
			       -6.40994113129432e-4,
			       9.25197374512647e-5,
			       -1.15662609053481e-5,
			       1.21222603512827e-6,
			       -8.36313918003957e-8 };

// t2[0], t2[1] coeffcients merged into a single array.
// padded zeros to make the size of the array to 20.
static const double T2_0_1[] = { .130693606237085,
				 -.0290430236084697,
				 .00444654947116579,
				 -5.33184749432408e-4,
				 4.743292959463e-5,
				 -2.447252174587e-6,
				 -4.558315364581e-8,
				 2.49173650389842e-8,
				 -2.35234358048491e-9,
				 0.0000000000000000,
				 2.86930639376289,
				 -.637623643056745,
				 .0532735082098139,
				 -5.88154362858038e-5,
				 -1.345693393936e-4,
				 -2.066168802076e-5,
				 1.83536773631e-6,
				 2.36809910635906e-7,
				 -2.4740490232917e-8,
				 0.000000000000000};

decls void Rysq_roots2_x0to1(double const X, double *t2, double *W) {
    
    double y = X;
    double e = exp(-X);
    double x2 = X + X;
    double f1 = 0.0;
    t2[0] = 0.0;
    t2[1] = 0.0;
    
    int size =  sizeof(C0_1)/sizeof(double);
    printf("size = %d\n", size);
    double yi = 1.0;
    
    // evaluation of f1, t1[0], t2[0] in a single loop
    for(int i = 0; i < size; ++i) {
	f1 += yi * C0_1[i];
	t2[0] += yi*T2_0_1[i];
	t2[1] += yi*T2_0_1[i+size];
	yi *= y;
    }
    

    W[0] = x2*f1 + e;
    W[1] = ((f1 - W[0]) * t2[0] + f1) * (t2[1] + 1.) / (t2[1] - t2[0]);
    W[0] -= W[1];
}

#undef r12
#undef pie4
#undef r22
#undef w22
#undef r13
#undef r23
#undef w23
#undef r33
#undef w33

#undef decls

#endif // _RYSQ_ROOTS2_H
