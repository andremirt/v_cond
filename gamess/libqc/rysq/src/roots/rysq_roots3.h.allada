// -*- C++ -*-

#ifndef _RYSQ_ROOTS3_H
#define _RYSQ_ROOTS3_H

#include <math.h>

#ifdef __CUDACC__
#define decls __device__
#else
#define decls static inline
#endif

#define r12 .275255128608411
#define pie4 .785398163397448
#define r22 2.72474487139158
#define w22 .0917517095361369
#define r13 .190163509193487
#define r23 1.78449274854325
#define w23 .177231492083829
#define r33 5.52534374226326
#define w33 .00511156880411248

decls void rysq_roots3_x47toINF(double const X, double *t2, double *W);
decls void rysq_roots3_x33to47(double const X, double *t2, double *W);
decls void rysq_roots3_x20to33(double const X, double *t2, double *W);
decls void Ghondo_roots3_x15to20(double const X, double *t2, double *W);
decls void Ghondo_roots3_x10to15(double const X, double *t2, double *W);
decls void Ghondo_roots3_x5to10(double const X, double *t2, double *W);
decls void Ghondo_roots3_x3to5(double const X, double *t2, double *W);
decls void Ghondo_roots3_x1to3(double const X, double *t2, double *W);
decls void Ghondo_roots3_x0to1(double const X, double *t2, double *W);

decls void Rysq_roots3(double const X, double *t2, double *W) {

    if (X > 47.) {
	rysq_roots3_x47toINF(X, t2, W);
	return;
    }
    if (X > 33.) {
	rysq_roots3_x33to47(X, t2, W);
	return;
    }
    if (X > 20.) {
	rysq_roots3_x20to33(X, t2, W);
	return;
    }
    if (X > 15.) {
	Ghondo_roots3_x15to20(X, t2, W);
	return;
    }
    if (X > 10.) {
	Ghondo_roots3_x10to15(X, t2, W);
	return;
    }
    if (X > 5.) {
	Ghondo_roots3_x5to10(X, t2, W);
	return;
    }
    if (X > 3.) {
	Ghondo_roots3_x3to5(X, t2, W);
	return;
    }
    if (X > 1.) {
	Ghondo_roots3_x1to3(X, t2, W);
	return;
    }
    if (X > 3e-7) {
	Ghondo_roots3_x0to1(X, t2, W);
	return;
    }
    /*     X IS APPROXIMATELY ZERO.         NROOTS=3 */
    t2[0] = .0603769246832797 - X * .00928875764357368;
    t2[1] = .776823355931043 - X * .119511285527878;
    t2[2] = 6.66279971938567 - X * 1.02504611068957;
    W[0] = .467913934572691 - X * .0564876917232519;
    W[1] = .360761573048137 - X * .149077186455208;
    W[2] = .171324492379169 - X * .127768455150979;
    
    return;
} // rysq_roots3

decls void rysq_roots3_x47toINF(double const X, double *t2, double *W) {
  W[0] = sqrt(pie4 / X);
  t2[0] = r13 / (X - r13);
  t2[1] = r23 / (X - r23);
  t2[2] = r33 / (X - r33);
  W[1] = w23 * W[0];
  W[2] = w33 * W[0];
  W[0] = W[0] - W[1] - W[2];
}

decls void rysq_roots3_x33to47(double const X, double *t2, double *W) {
  W[0] = sqrt(pie4 / X);
  double e = exp(-X);
  t2[0] = ((X * -7.39058467995275 + 321.318352526305) * X - 
	   3994.33696473658) * e + r13 / (X - r13);
  t2[1] = ((X * -73.8726243906513 + 3135.69966333873) * X - 
	   38686.2867311321) * e + r23 / (X - r23);
  t2[2] = ((X * -263.750565461336 + 10441.2168692352) * X - 
	   128094.577915394) * e + r33 / (X - r33);
  W[2] = (((X * .152258947224714 - 8.30661900042651) * X + 
	   192.977367967984) * X - 1677.87926005344) * e + w33 * W[0];
  W[1] = ((X * 61.5072615497811 - 2919.80647450269) * X + 
	  38079.4303087338) * e + w23 * W[0];
  W[0] = W[0] - W[1] - W[2];
}

decls void rysq_roots3_x20to33(double const X, double *t2, double *W) {
  double e = exp(-X);
  W[0] = ((.1962326414943 / X - .4969524146449) / X - 
	  6.0156581186481e-5) * e + sqrt(pie4 / X);
  double f1 = (W[0] - e) / (X + X);
  double f2 = (f1 + f1 + f1 - e) / (X + X);
  t2[0] = ((((X * -4.97561537069643e-4 - .0500929599665316) * 
	     X + 1.31099142238996) * X - 18.8336409225481) * 
	   X - 660.344754467191 / X + 164.931462413877) * e + 
    r13 / (X - r13);
  t2[1] = ((((X * -.00448218898474906 - .517373211334924) * X 
	     + 11.3691058739678) * X - 165.426392885291) * X - 
	   6309.09125686731 / X + 1522.31757709236) * e + r23 / (
								 X - r23);
  t2[2] = ((((X * -.0138368602394293 - 1.77293428863008) * X + 
	     17.3639054044562) * X - 357.615122086961) * X - 
	   14573.4701095912 / X + 2698.31813951849) * e + r33 / (
								 X - r33);
  double tmp1 = t2[0] / (t2[0] + 1.);
  double tmp2 = t2[1] / (t2[1] + 1.);
  double tmp3 = t2[2] / (t2[2] + 1.);
  double a2 = f2 - tmp1 * f1;
  double a1 = f1 - tmp1 * W[0];
  W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];
}

static const double C15_20[] = { .1962326414943,
				 -.4969524146449,
				 6.0156581186481e-5 };

static const double T20_15_20[] = { 0.0000000000000,
				    -19761.1541576986 ,
				    9824.41363463929,
				    -2079.70687843258,
				    243.517435690398,
				    -17.3209218219175,
				    .781425144913975,
				    -.0234112415981143,
				    3.57901398988359e-4,
				    -2.43270989903742e-6 };

static const double T21_15_20[] = { -2916691.1368102,
				    1411295.05262758,
				    -291532.335433779,
				    33520.2872835409,
				    -2366.59637247087,
				    107.037141010778,
				    -3.0933761873188,
				    .0349187925428138,
				    -2.62627010965435e-4,
				    0.0000000000 };

static const double T22_15_20[] = { 0.0000000,
				    -189829.509315154,
				    51149.8390849158,
				    -6881.45821789955,
				    404.996712650414,
				    -18.4338896480695,
				    -.783503697918455,
				    -.0287029400759565,
				    9.31856404738601e-5,
				    0.00000000000};

decls void Rysq_roots3_x15to20(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    double xi3 = pow(X, -3);

    double xi = xi3*X;
    for(int i = 0; i < sizeof(C15_20)/sizeof(double); ++i) {
	W[0] += xi *C15_20[i];
	xi *= X;
    }
    double f1 = (W[0] - e) / x2;
    double f2 = (f1 + f1 + f1 - e) / x2;

    xi = xi3;
    for(int i = 0; i < sizeof(T20_15_20)/sizeof(double); ++i) {
	t2[0] = xi * T20_15_20[i];
	t2[1] = xi * T21_15_20[i];
	t2[2] = xi * T22_15_20[i];
	xi *= X;
    }

    t2[0] = t2[0]*e + r13/(X - r13);
    t2[1] = t2[1]*e + r23/(X - r23);
    t2[2] = t2[2]*e + r33/(X - r33);

  double tmp1 = t2[0] / (t2[0] + 1.);
  double tmp2 = t2[1] / (t2[1] + 1.);
  double tmp3 = t2[2] / (t2[2] + 1.);
  double a2 = f2 - tmp1 * f1;
  double a1 = f1 - tmp1 * W[0];
  W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];

}
    
decls void Ghondo_roots3_x15to20(double const X, double *t2, double *W) {
    double e = exp(-X);
    W[0] = ((.1962326414943 / X - .4969524146449) / X - 
	    6.0156581186481e-5) * e + sqrt(pie4 / X);
    double f1 = (W[0] - e) / (X + X);
    double f2 = (f1 + f1 + f1 - e) / (X + X);
    t2[0] = ((((((X * -2.43270989903742e-6 + 3.57901398988359e-4) * 
		 X - .0234112415981143) * X + .781425144913975) * 
	       X - 17.3209218219175) * X + 243.517435690398) * 
	     X + (-19761.1541576986 / X + 9824.41363463929) / 
	     X - 2079.70687843258) * e + r13 / (X - r13);
    t2[1] = (((((X * -2.62627010965435e-4 + .0349187925428138) * 
		X - 3.0933761873188) * X + 107.037141010778) * 
	      X - 2366.59637247087) * X + ((-2916691.1368102 / 
					    X + 1411295.05262758) / X - 291532.335433779) / 
	     X + 33520.2872835409) * e + r23 / (X - r23);
    t2[2] = (((((X * 9.31856404738601e-5 - .0287029400759565) * 
		X - .783503697918455) * X - 18.4338896480695) * 
	      X + 404.996712650414) * X + (-189829.509315154 / 
					   X + 51149.8390849158) / X - 6881.45821789955) * e + 
	r33 / (X - r33);
    
    
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];
}

decls void Ghondo_roots3_x10to15(double const X, double *t2, double *W) {
  double e = exp(-X);
  W[0] = (((-.18784686463512 / X + .22991849164985) / X - 
	   .49893752514047) / X - 2.1916512131607e-5) * e + sqrt(pie4 
								 / X);
  double f1 = (W[0] - e) / (X + X);
  double f2 = (f1 + f1 + f1 - e) / (X + X);
  double y = X - 12.5;

      
  t2[0] = (((((((((((y * 4.4213300128309e-16 - 2.77189767070441e-15) * y - 
		    4.084026087887e-14) * y + 5.379885121517e-13) * y + 
		  1.882093066702e-12) * y - 8.67286219861085e-11) * y + 
		7.11372337079797e-10) * y - 3.55578027040563e-9) * y + 
	      1.29454702851936e-7) * y - 4.14222202791434e-6) * y + 
	    8.04427643593792e-5) * y - .00118587782909876) * y + 
    .0153435577063174;


  t2[1] = (((((((((((y * 6.85146742119357e-15 - 1.08257654410279e-14) * y - 
		    8.579165965128e-13) * y + 6.642452485783e-12) * y + 
		  4.798806828724e-11) * y - 1.13413908163831e-9) * y + 
		7.08558457182751e-9) * y - 5.59678576054633e-8) * y + 
	      2.51020389884249e-6) * y - 6.63678914608681e-5) * y + 
	    .00111888323089714) * y - .0145361636398178) * y + 
    .165077877454402;
  t2[2] = ((((((((((((y * 3.20622388697743e-15 - 2.73458804864628e-14) * y - 
		     3.157134329361e-13) * y + 8.654129268056e-12) * y - 
		   5.625235879301e-11) * y - 7.718080513708e-10) * y + 
		 2.064664199164e-8) * y - 1.567725007761e-7) * y - 
	       1.57938204115055e-6) * y + 6.27436306915967e-5) * y - 
	     .00101308723606946) * y + .0113901881430697) * y - 
	   .10144965289945) * y + .777203937334739;

  double tmp1 = t2[0] / (t2[0] + 1.);
  double tmp2 = t2[1] / (t2[1] + 1.);
  double tmp3 = t2[2] / (t2[2] + 1.);
  double a2 = f2 - tmp1 * f1;
  double a1 = f1 - tmp1 * W[0];
  W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];
}


decls void Ghondo_roots3_x5to10(double const X, double *t2, double *W) {
  double e = exp(-X);
  

  W[0] = ((((((.46897511375022 / X - .69955602298985) / X + 
	      .53689283271887) / X - .32883030418398) / X + 
	    .24645596956002) / X - .49984072848436) / X - 
	  3.1501078774085e-6) * e + sqrt(pie4 / X);
  double f1 = (W[0] - e) / (X + X);
  double f2 = (f1 + f1 + f1 - e) / (X + X);
  double y = X - 7.5;
  t2[0] = (((((((((((y * 5.74429401360115e-16 + 7.11884203790984e-16) * y - 
		    6.736701449826e-14) * y - 6.264613873998e-13) * y + 
		  1.31541892704e-11) * y - 4.23879635610964e-11) * y + 
		1.39032379769474e-9) * y - 4.65449552856856e-8) * y + 
	      7.34609900170759e-7) * y - 1.08656008854077e-5) * y + 
	    1.77930381549953e-4) * y - .00239864911618015) * y + 
    .0239112249488821;

  t2[1] = (((((((((((y * 1.1346409620912e-14 + 6.99375313934242e-15) * y - 
		    8.595618132088e-13) * y - 5.293620408757e-12) * y - 
		  2.492175211635e-11) * y + 2.73681574882729e-9) * y - 
		1.06656985608482e-8) * y - 4.40252529648056e-7) * y + 
	      9.68100917793911e-6) * y - 1.68211091755327e-4) * y + 
	    .00269443611274173) * y - .0323845035189063) * y + 
    .275969447451882;

  t2[2] = ((((((((((((y * 6.66339416996191e-15 + 1.84955640200794e-13) * y - 
		     1.985141104444e-12) * y - 2.309293727603e-11) * y + 
		   3.917984522103e-10) * y + 1.663165279876e-9) * y - 
		 6.205591993923e-8) * y + 8.769581622041e-9) * y + 
	       8.97224398620038e-6) * y - 3.14232666170796e-5) * y - 
	     .00183917335649633) * y + .0351246831672571) * y - 
	   .32233505127086) * y + 1.7358283175543;
  double tmp1 = t2[0] / (t2[0] + 1.);
  double tmp2 = t2[1] / (t2[1] + 1.);
  double tmp3 = t2[2] / (t2[2] + 1.);
  double a2 = f2 - tmp1 * f1;
  double a1 = f1 - tmp1 * W[0];
  W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];
}

decls void Ghondo_roots3_x3to5(double X, double *t2, double *W) {
    double y = X - 4.;
    t2[0] = (((((((y * 1.44265709189601e-11 - 4.66622033006074e-10) * y + 
		  7.649155832025e-9) * y - 1.229940017368e-7) * y + 
		2.026002142457e-6) * y - 2.87048671521677e-5) * y + 
	      3.70326938096287e-4) * y - .00421006346373634) * y + 
	.0350898470729044;
    t2[1] = ((((((((y * -2.65526039155651e-11 + 1.97549041402552e-10) * y + 
		   2.15971131403034e-9) * y - 7.95045680685193e-8) * y + 
		 5.15021914287057e-7) * y + 1.11788717230514e-5) * y - 
	       3.33739312603632e-4) * y + .00530601428208358) * y - 
	     .0593483267268959) * y + .431180523260239;
    t2[2] = ((((((((y * -3.92833750584041e-10 - 4.1642322978228e-9) * y + 
		   4.42413039572867e-8) * y + 6.40574545989551e-7) * y - 
		 3.05512456576552e-6) * y - 1.05296443527943e-4) * y - 
	       6.14120969315617e-4) * y + .0489665802767005) * y - 
	     .624498381002855) * y + 3.36412312243724;
    
    
    double f2 = ((((((((((y * -2.36788772599074e-11 + 2.89147476459092e-10) * y - 
			 3.18111322308846e-9) * y + 3.25336816562485e-8) * y - 
		       3.00873821471489e-7) * y + 2.48749160874431e-6) * y - 
		     1.81353179793672e-5) * y + 1.14504948737066e-4) * y - 
		   6.10614987696677e-4) * y + .00264584212770942) * y - 
		 .00866415899015349) * y + .0175257821619922;
    double e = exp(-X);
    double f1 = ((X + X) * f2 + e) / 3.;
    W[0] = (X + X) * f1 + e;
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
}

decls void Ghondo_roots3_x1to3(double const X, double *t2, double *W) {
  double y = X - 2.;
  t2[0] = ((((((((y * 1.44687969563318e-12 + 4.85300143926755e-12) * y - 
		 6.55098264095516e-10) * y + 1.56592951656828e-8) * y - 
	       2.60122498274734e-7) * y + 3.86118485517386e-6) * y - 
	     5.13430986707889e-5) * y + 6.03194524398109e-4) * y - 
	   .0061121934982509) * y + .0452578254679079;
  t2[1] = (((((((y * 6.95964248788138e-10 - 5.35281831445517e-9) * y - 
		6.745205954533e-8) * y + 1.502366784525e-6) * y + 
	      9.923326947376e-7) * y - 3.89147469249594e-4) * y + 
	    .00751549330892401) * y - .08487781203634) * y + .573928229597613;
  t2[2] = ((((((((y * -2.81496588401439e-10 + 3.61058041895031e-9) * y + 
		 4.53631789436255e-8) * y - 1.40971837780847e-7) * y - 
	       6.05865557561067e-6) * y - 5.15964042227127e-5) * y + 
	     3.34761560498171e-5) * y + .0504871005319119) * y - 
	   .824708946991557) * y + 4.81234667357205;

  double f2 = ((((((((((y * -1.4804423107214e-10 + 1.78157031325097e-9) * y - 
		       1.92514145088973e-8) * y + 1.92804632038796e-7) * y - 
		     1.73806555021045e-6) * y + 1.39195169625425e-5) * y - 
		   9.74574633246452e-5) * y + 5.83701488646511e-4) * y - 
		 .00289955494844975) * y + .011384700111381) * y - 
	       .0323446977320647) * y + .0529428148329709;

  
  double e = exp(-X);
  double f1 = ((X + X) * f2 + e) / 3.;
  W[0] = (X + X) * f1 + e;
  double tmp1 = t2[0] / (t2[0] + 1.);
  double tmp2 = t2[1] / (t2[1] + 1.);
  double tmp3 = t2[2] / (t2[2] + 1.);
  double a2 = f2 - tmp1 * f1;
  double a1 = f1 - tmp1 * W[0];
  W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
  W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
  W[0] = W[0] - W[1] - W[2];
}

decls void Ghondo_roots3_x0to1(double const X, double *t2, double *W) {
    t2[0] = ((((((X * -5.1018669153887e-10 + 2.4013441570345e-8) * 
		 X - 5.01081057744427e-7) * X + 7.58291285499256e-6) 
	       * X - 9.55085533670919e-5) * X + .00102893039315878)
	     * X - .00928875764374337) * X + .060376924683281;
    t2[1] = ((((((X * -1.29646524960555e-8 + 7.74602292865683e-8) * 
		 X + 1.56022811158727e-6) * X - 1.58051990661661e-5) 
	       * X - 3.30447806384059e-4) * X + .00974266885190267)
	     * X - .119511285526388) * X + .776823355931033;
    t2[2] = ((((((X * -9.28536484109606e-9 - 3.02786290067014e-7) * 
		 X - 2.507344770642e-6) * X - 7.32728109752881e-6) * 
	       X + 2.44217481700129e-4) * X + .0494758452357327) * 
	     X - 1.02504611065774) * X + 6.66279971938553;
    
    double f2 = ((((((((X * -7.6091148609885e-8 + 1.09552870123182e-6) * 
		       X - 1.03463270693454e-5) * X + 8.16324851790106e-5) 
		     * X - 5.55526624875562e-4) * X + .00320512054753924)
		   * X - .015151513983854) * X + .0555555554649585) * 
		 X - .142857142854412) * X + .199999999999986;
    
    
    double e = exp(-X);
    double f1 = ((X + X) * f2 + e) / 3.;
    W[0] = (X + X) * f1 + e;
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
}

static const double C0_1[] = {  .199999999999986,
				-.142857142854412,
				.0555555554649585,
				-.015151513983854,
				.00320512054753924,
				-5.55526624875562e-4,
				8.16324851790106e-5,
				-1.03463270693454e-5,
				1.09552870123182e-6,
				-7.6091148609885e-8 };

static const double T20_0_1[] = { .060376924683281,
				  -.00928875764374337,
				  .00102893039315878,
				  -9.55085533670919e-5,
				  7.58291285499256e-6,
				  -5.01081057744427e-7,
				  2.4013441570345e-8,
				  -5.1018669153887e-10 };

static const double T21_0_1[] = {  .776823355931033,
				   -.119511285526388,
				   0.00974266885190267,
				   -3.30447806384059e-4,
				   -1.58051990661661e-5,
				   1.56022811158727e-6,
				   7.74602292865683e-8,
				   -1.29646524960555e-8};

static const double T22_0_1[] = { 6.66279971938553,
				  -1.02504611065774,
				  .0494758452357327,
				  2.44217481700129e-4,
				  -7.32728109752881e-6,
				  -2.507344770642e-6,
				  -3.02786290067014e-7,
				  -9.28536484109606e-9 };

decls void Rysq_roots3_x0to1(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    t2[0] = 0.0;
    t2[1] = 0.0;
    t2[2] = 0.0;
    
    double xi = 1.0;
    for(int i = 0; i < sizeof(T20_0_1)/sizeof(double); ++i) {
	t2[0] += xi* T20_0_1[i];
	t2[1] += xi* T21_0_1[i];
	t2[2] += xi* T22_0_1[i];
	xi *= X;
    }
    
    double f2 = 0.0;
    xi = 1.0;
    for(int i = 0; i < sizeof(C0_1)/sizeof(double); ++i) {
	f2 += xi*C0_1[i]; 
	xi *= X;
    }
    
    double f1 = (x2 * f2 + e) / 3.;
    W[0] = x2 * f1 + e;
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
}

static const double T20_1_3[] = { .0452578254679079,
				  -.0061121934982509,
				  6.03194524398109e-4,
				  -5.13430986707889e-5,
				  3.86118485517386e-6,
				  -2.60122498274734e-7,
				  1.56592951656828e-8,
				  -6.55098264095516e-10,
				  4.85300143926755e-12,
				  1.44687969563318e-12  };

static const double T21_1_3[] = { .573928229597613,
				  -.08487781203634,
				  .00751549330892401,
				  -3.89147469249594e-4,
				  9.923326947376e-7,
				  1.502366784525e-6,
				  -6.745205954533e-8,
				  -5.35281831445517e-9,
				  6.95964248788138e-10, 
				  0.00000000000};


static const double T22_1_3[] = {  4.81234667357205,
				   -.824708946991557,
				   .0504871005319119,
				   3.34761560498171e-5,
				   -5.15964042227127e-5,
				   -6.05865557561067e-6,
				   -1.40971837780847e-7,
				   4.53631789436255e-8,
				   3.61058041895031e-9,
				   -2.81496588401439e-10 };


static const double C1_3[] = { .0529428148329709,
			       -.0323446977320647,				 
			       .011384700111381,
			       -.00289955494844975,
			       5.83701488646511e-4,
			       -9.74574633246452e-5,
			       1.39195169625425e-5,
			       -1.73806555021045e-6,
			       1.92804632038796e-7,
			       -1.92514145088973e-8,
			       1.78157031325097e-9,
			       -1.4804423107214e-10 };

decls void Rysq_roots3_x1to3(double const X, double *t2, double *W) {
    double y = X - 2.;
    double e = exp(-X);
    double x2 = X + X;
    
    t2[0] = 0.0;
    t2[1] = 0.0;
    t2[2] = 0.0;
    
    double yi = 1.0;
    for(int i = 0; i < sizeof(T20_1_3)/sizeof(double); ++i) {
	t2[0] += yi* T20_1_3[i];
	t2[1] += yi* T21_1_3[i];
	t2[2] += yi* T22_1_3[i];
	yi *= y;
    }
    
    double f2 = 0.0;
    yi = 1.0;
    for(int i = 0; i < sizeof(C1_3)/sizeof(double); ++i) {
	f2 += yi*C1_3[i]; 
	yi *= y;
    }
    
    double f1 = (x2 * f2 + e) / 3.;
    W[0] = x2 * f1 + e;
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
}

static const double T20_3_5[] = {  .0350898470729044,
				   -.00421006346373634,
				   3.70326938096287e-4,
				   -2.87048671521677e-5,
				   2.026002142457e-6,
				   -1.229940017368e-7,
				   7.649155832025e-9,
				   -4.66622033006074e-10,
				   1.44265709189601e-11, 
				   0.00000000000000 };

static const double T21_3_5[] = { .431180523260239,
				  -.0593483267268959,
				  .00530601428208358,
				  -3.33739312603632e-4,
				  1.11788717230514e-5,
				  5.15021914287057e-7,
				  -7.95045680685193e-8,
				  2.15971131403034e-9,
				  1.97549041402552e-10,
				  -2.65526039155651e-11 };

static const double T22_3_5[] = { 3.36412312243724,
				  -.624498381002855,
				  .0489665802767005,
				  -6.14120969315617e-4,
				  -1.05296443527943e-4,
				  -3.05512456576552e-6,
				  6.40574545989551e-7,
				  4.42413039572867e-8,
				  -4.1642322978228e-9,
				  -3.92833750584041e-10 };


static const double C3_5[] = { .0175257821619922,
				  -.00866415899015349,
				  .00264584212770942,
				  -6.10614987696677e-4,
				  1.14504948737066e-4,
				  -1.81353179793672e-5,
				  2.48749160874431e-6,
				  -3.00873821471489e-7,
				  3.25336816562485e-8,
				  -3.18111322308846e-9,
				  2.89147476459092e-10,
				  -2.36788772599074e-11 };


decls void Rysq_roots3_x3to5(double const X, double *t2, double *W) {
    double y = X - 4.;
    double e = exp(-X);
    double x2 = X + X;
    
    t2[0] = 0.0;
    t2[1] = 0.0;
    t2[2] = 0.0;
    
    double yi = 1.0;
    for(int i = 0; i < sizeof(T20_3_5)/sizeof(double); ++i) {
	t2[0] += yi* T20_3_5[i];
	t2[1] += yi* T21_3_5[i];
	t2[2] += yi* T22_3_5[i];
	yi *= y;
    }
    
    double f2 = 0.0;
    yi = 1.0;
    for(int i = 0; i < sizeof(C3_5)/sizeof(double); ++i) {
	f2 += yi*C3_5[i]; 
	yi *= y;
    }
    
    double f1 = (x2 * f2 + e) / 3.;
    W[0] = x2 * f1 + e;
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
}

static const double C5_10[] = { .46897511375022,
				-.69955602298985,
				.53689283271887,
				-.32883030418398,
				.24645596956002,
				-.49984072848436,
				3.1501078774085e-6 };

static const double T20_5_10[] = {  .0239112249488821,
				    -.00239864911618015,
				    1.77930381549953e-4,
				    -1.08656008854077e-5,
				    7.34609900170759e-7,
				    -4.65449552856856e-8,
				    1.39032379769474e-9,
				    -4.23879635610964e-11,
				    1.31541892704e-11,
				    -6.264613873998e-13,
				    -6.736701449826e-14,
				    7.11884203790984e-16,
				    5.74429401360115e-16 };

static const double T21_5_10[] = { .275969447451882,
				   -.0323845035189063,
				   .00269443611274173,
				   -1.68211091755327e-4,
				   9.68100917793911e-6,
				   -4.40252529648056e-7,
				   -1.06656985608482e-8,
				   2.73681574882729e-9,
				   -2.492175211635e-11,
				   -5.293620408757e-12,
				   -8.595618132088e-13,
				   6.99375313934242e-15,
				   1.1346409620912e-14  };

static double T22_5_10[] = {  1.7358283175543,
			      -.32233505127086,
			      .0351246831672571,
			      -.00183917335649633,
			      -3.14232666170796e-5,
			      8.97224398620038e-6,
			      8.769581622041e-9,
			      -6.205591993923e-8,
			      1.663165279876e-9,
			      3.917984522103e-10,
			      -2.309293727603e-11,
			      1.985141104444e-12,
			      1.84955640200794e-13,
			      6.66339416996191e-15 };

decls void Rysq_roots3_x5to10(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    W[0] = 0.0;
    double xi = pow(X, -6);
    for(int i = 0; i < sizeof(C5_10)/sizeof(double); ++i) {
	W[0] += xi *C5_10[i];
	xi *= X;
    }
    
    W[0] = W[0]*e + sqrt(pie4 / X);
    double f1 = (W[0] - e) / x2;
    double f2 = (f1 + f1 + f1 - e) / x2;
    double y = X - 7.5;
    double yi = 1.0;

    for(int i = 0; i < sizeof(T20_5_10)/sizeof(double); ++i) {
	t2[0] += yi*T20_5_10[i];
	t2[1] += yi*T21_5_10[i];
	t2[2] += yi*T22_5_10[i];
	yi *= y;
    }
    
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
    
}


static const double C10_15[] = { -.18784686463512,
			  .22991849164985,
			  .49893752514047,
			  -2.1916512131607e-5 };

static const double T20_10_15[] = { .0153435577063174,
				    -.00118587782909876,
				    8.04427643593792e-5,
				    -4.14222202791434e-6,
				    1.29454702851936e-7,
				    -3.55578027040563e-9,
				    7.11372337079797e-10,
				    -8.67286219861085e-11,
				    1.882093066702e-12,
				    5.379885121517e-13,
				    4.084026087887e-14,
				    -2.77189767070441e-15,
				    4.4213300128309e-16, 
				    0.000000000000000000};

static const double T21_10_15[] = {  .165077877454402,
				     -.0145361636398178,
				     .00111888323089714,
				     -6.63678914608681e-5,
				     2.51020389884249e-6,
				     -5.59678576054633e-8,
				     7.08558457182751e-9,
				     -1.13413908163831e-9,
				     4.798806828724e-11,
				     6.642452485783e-12,
				     -8.579165965128e-13,
				     -1.08257654410279e-14,
				     6.85146742119357e-15, 
				     0.0000000000000};


static const double T22_10_15[] = {  .777203937334739,
				     -.10144965289945,
				     .0113901881430697,
				     -.00101308723606946,
				     6.27436306915967e-5,
				     -1.57938204115055e-6,
				     -1.567725007761e-7,
				     2.064664199164e-8,
				     -7.718080513708e-10,
				     -5.625235879301e-11,
				     8.654129268056e-12,
				     -3.157134329361e-13,
				     -2.73458804864628e-14,
				     3.20622388697743e-15 };

decls void Rysq_roots3_x10to15(double const X, double *t2, double *W) {
    double e = exp(-X);
    double x2 = X + X;
    
    W[0] = 0.0;
    double xi = pow(X, -3);
    for(int i = 0; i < sizeof(C10_15)/sizeof(double); ++i) {
	W[0] += xi *C10_15[i];
	xi *= X;
    }
    
    W[0] = W[0]*e + sqrt(pie4 / X);
    double f1 = (W[0] - e) / x2;
    double f2 = (f1 + f1 + f1 - e) / x2;
    double y = X - 12.5;
    double yi = 1.0;
    
    for(int i = 0; i < sizeof(T20_10_15)/sizeof(double); ++i) {
	t2[0] += yi*T20_10_15[i];
	t2[1] += yi*T21_10_15[i];
	t2[2] += yi*T22_10_15[i];
	yi *= y;
    }
    
    double tmp1 = t2[0] / (t2[0] + 1.);
    double tmp2 = t2[1] / (t2[1] + 1.);
    double tmp3 = t2[2] / (t2[2] + 1.);
    double a2 = f2 - tmp1 * f1;
    double a1 = f1 - tmp1 * W[0];
    W[2] = (a2 - tmp2 * a1) / ((tmp3 - tmp2) * (tmp3 - tmp1));
    W[1] = (tmp3 * a1 - a2) / ((tmp3 - tmp2) * (tmp2 - tmp1));
    W[0] = W[0] - W[1] - W[2];
    
}


#undef r12
#undef pie4
#undef r22
#undef w22
#undef r13
#undef r23
#undef w23
#undef r33
#undef w33

#undef decls

#endif // _RYSQ_ROOTS3_H
