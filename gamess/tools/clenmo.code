C 15 SEP 90 - MWS - DEACTIVATE DEGENERATE ORBITAL ROTATION
C 10 APR 85 - MWS
C     **************
      PROGRAM CLENMO
C     **************
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER (MAXAO=255)
      DIMENSION VEC(MAXAO*MAXAO),TITLE(10)
*UNX  character*100 filenm
      DATA VECWRD/8H $VEC   /
C
C  This program cleans up GAMESS MOs by zeroing tiny numbers
C  and setting any numbers of nearly equal magnitude to
C  exactly the same magnitude.   This is done by setting numbers
C  less than 10**(-TOLZ) to zero, and and equating magnitudes
C  for numbers whose magnitudes agree to one part in 10**(-TOLE).
C  Note that much of the functionality of this program is now
C  contained in GAMESS' GUESS=MOREAD option, except that this
C  program is more interactive.
C
C           FILES USED BY THIS PROGRAM ARE
C   MOIN  - INPUT MO FILE. THIS FILE SHOULD CONTAIN ANY NUMBER OF
C           DESCRIPTIVE TITLE CARDS, FOLLOWED BY A $VEC CARD.
C           THE MO-S SHOULD FOLLOW THE $VEC CARD. THERE SHOULD
C           BE NO $END CARD IF THERE ARE FEWER MO-S THAN AO-S.
C   MOOUT - OUTPUT MO FILE, CONTAINING A COPY OF THE TITLE CARD(S),
C           A $VEC CARD, THE MO-S THEMSELVES, AND A $END CARD
C   IR    - INTERACTIVE INPUT (SELF EXPLANATORY)
C   IW    - INTERACTIVE OUTPUT
C
C  Written by Mike Schmidt, Department of Chemistry,
C  North Dakota State University, October 17, 1984.
C
C  THIS PROGRAM WILL ALSO ROTATE DEGENERATE SETS OF ORBITALS TO
C  GIVE CLEAN SUBSPECIES.   THE CODE FOR TRIPLE DEGENERACY DOES
C  NOT ACTUALLY WORK, THE DOUBLE DEGENERACY STUFF IS DECOMISSIONED.
C
      MOIN=1
      MOOUT=2
      IR=5
      IW=6
C
*VMS  OPEN (UNIT=MOIN,FILE='MOIN',STATUS='OLD',
*VMS *      FORM='FORMATTED',ACCESS='SEQUENTIAL')
*VMS  OPEN (UNIT=MOOUT,FILE='MOOUT',STATUS='NEW',
*VMS *      CARRIAGECONTROL='NONE',
*VMS *      FORM='FORMATTED',ACCESS='SEQUENTIAL')
C
*IBM  OPEN (UNIT=MOIN,FILE='MOIN',STATUS='OLD',
*IBM *      FORM='FORMATTED',ACCESS='SEQUENTIAL')
*IBM  OPEN (UNIT=MOOUT,FILE='MOOUT',STATUS='UNKNOWN',
*IBM *      FORM='FORMATTED',ACCESS='SEQUENTIAL')
C
*UNX  call getenv('MOIN',filenm)
*UNX  if(filenm(1:1).eq.' ') then
*UNX        write(iw,*) 'You must assign MOIN to your input deck by a'
*UNX        write(iw,*) '   setenv MOIN input_file_name'
*UNX        stop
*UNX     end if
*UNX  open(unit=moin, file=filenm, status='old', form='formatted',
*UNX *           access='sequential')
C
*UNX  call getenv('MOOUT',filenm)
*UNX  if(filenm(1:1).eq.' ') then
*UNX        write(iw,*) 'You must assign MOOUT to your output deck by'
*UNX        write(iw,*) '   setenv MOOUT output_file_name'
*UNX        stop
*UNX     end if
*UNX  open(unit=moout, file=filenm, status='unknown', form='formatted',
*UNX *           access='sequential')
C
      REWIND MOIN
      REWIND MOOUT
C
C  READ THE INPUT MO FILE
C
  100 CONTINUE
         READ(MOIN,900) TITLE
         IF(TITLE(1).EQ.VECWRD) GO TO 110
         WRITE(MOOUT,900) TITLE
         GO TO 100
C
  110 CONTINUE
      WRITE(IW,910)
      READ(IR,*) NAO
      IF(NAO.GT.MAXAO) WRITE(IW,920)
      IF(NAO.GT.MAXAO) STOP
      CALL READMO(VEC,NAO,NMO,MOIN,IW)
      WRITE(IW,930) NMO,MOIN
C
C  ROTATE ANY DEGENERATE MO-S INTO CLEAN SUBSPECIES
C            ALWAYS AVOID ROTATION OF DEGENERATE MO-S
C
      IF(IW.LT.0)
     *     CALL ROTATE(VEC,NAO,NMO,IR,IW)
C
C  NOW CLEAN UP THE MOS
C
      WRITE(IW,940)
      READ(IR,*) TOLZ,TOLE
      CALL CLEAN(VEC,NAO,NMO,TOLZ,TOLE,NZER,NEQU)
      WRITE(IW,950) NZER,TOLZ,NEQU,TOLE
C
C  NOW WRITE OUT THE CLEANED UP MO-S
C
      CALL PUSQL(VEC,NAO,NMO,MOOUT)
      WRITE(IW,960) NMO,NAO,MOOUT
      STOP
C
  900 FORMAT(10A8)
  910 FORMAT(1X,'How many AOs are there? >',$)
  920 FORMAT(1X,'* * * ERROR, TOO MANY AO-S, REDIMENSION')
  930 FORMAT(1X,I5,' MOs were read from file',I4)
  940 FORMAT(1X,'Enter (1) desired tolerance for setting teeny',
     *      ' numbers to zero,'/1X,'and (2) relative tolerance for',
     *      ' equating coefficient magnitudes.'/1X,
     *      'Give as two negative powers of ten (i.e. 7.5 means',
     *      ' 10**(-7.5))'/1X,'Suggested values are 8.0 and 5.0 >',$)
  950 FORMAT(1X,I5,' MO coefs were zeroed,  at TOLZ=',1P,E10.4/
     *       1X,I5,' MO coefs were equated, at TOLE=',1P,E10.4)
  960 FORMAT(1X,I4,' MOs expanded in',I4,
     *       ' AOs have been written to file',I3)
      END
C     ************************************
      SUBROUTINE READMO(V,NAO,NMO,MOIN,IW)
C     ************************************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION V(NAO,1)
      NMO=0
  100 CONTINUE
         NMO=NMO+1
         IF(NMO.GT.NAO) GO TO 300
         KARD = 0
         MAX = 0
  200    CONTINUE
            MIN=MAX+1
            MAX=MAX+5
            KARD=KARD+1
            IF(MAX.GT.NAO) MAX=NAO
            READ(MOIN,9010,END=300) N,K,(V(I,NMO),I=MIN,MAX)
            IF(N.NE.NMO .AND. K.NE.KARD) GO TO 800
            IF(MAX.LT.NAO) GO TO 200
         GO TO 100
  300 CONTINUE
      NMO=NMO-1
      RETURN
C
C  ERROR, MO-S ARE OUT OF ORDER
C
  800 CONTINUE
      WRITE(IW,9020) NMO,N,KARD,K
      STOP
C
 9010 FORMAT(I2,I3,5E15.8)
 9020 FORMAT(1X,'* * * ERROR * * *'/1X,'EXPECTING NMO=',I4,
     *       ' BUT FOUND',I4/1X,'EXPECTING CARD',I4,
     *       ' BUT FOUND',I4)
      END
C     *************************************************
      SUBROUTINE CLEAN(VEC,NAO,NMO,TOLZ,TOLE,NZER,NEQU)
C     *************************************************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION VEC(NAO,NMO)
      DATA ZERO/0.0D0/, ONE/1.0D0/
C
      NZER=0
      NEQU=0
      TOLZ=10.0D0**(-TOLZ)
      TOLE=10.0D0**(-TOLE)
      DO 400 J=1,NMO
         DO 300 I=1,NAO
            VAL1=ABS(VEC(I,J))
            IF(VAL1.EQ.ZERO) GO TO 300
C                              ZERO THE TEENY ONES
            IF(VAL1.GT.TOLZ) GO TO 100
               VEC(I,J)=ZERO
               NZER=NZER+1
               GO TO 300
  100       CONTINUE
C                              EQUAL MAGNITUDES FOR THE NONZERO
            IF(I.EQ.NAO) GO TO 300
            FAC=ONE/VAL1
            KMIN=I+1
            DO 200 K=KMIN,NAO
               VAL2=ABS(VEC(K,J))
               TEST=ABS(FAC*(VAL1-VAL2))
               IF(TEST.GT.TOLE) GO TO 200
               IF(TEST.EQ.ZERO) GO TO 200
                  VEC(K,J) = SIGN(VAL1,VEC(K,J))
                  NEQU=NEQU+1
  200       CONTINUE
  300    CONTINUE
  400 CONTINUE
      RETURN
      END
C     **************************
      SUBROUTINE PUSQL(V,N,M,IP)
C     **************************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION V(N,M)
      WRITE(IP,9000)
      DO 200 J=1,M
         IC = 0
         MAX = 0
  100    CONTINUE
            MIN=MAX+1
            MAX=MAX+5
            IC=IC+1
            IF(MAX.GT.N) MAX=N
            JP=MOD(J,100)
            WRITE(IP,9010) JP,IC,(V(I,J),I=MIN,MAX)
         IF(MAX.LT.N) GO TO 100
  200 CONTINUE
      WRITE(IP,9020)
      RETURN
 9000 FORMAT(' $VEC')
 9010 FORMAT(I2,I3,5E15.8)
 9020 FORMAT(' $END')
      END
C     ************************************
      SUBROUTINE ROTATE(VEC,NAO,NMO,IR,IW)
C     ************************************
      IMPLICIT REAL*8(A-H,O-Z)
      CHARACTER*1 LET
      DIMENSION VEC(NAO,NMO),TEMP(3),
     *          U(3,3),T(3,3),V(2,2),W(2,2)
      DATA ZERO/0.0D0/
C
      WRITE(IW,900)
  900 FORMAT(1X,'ARE THERE ANY DEGENERATE ORBITALS? Y/N>',$)
      READ(IR,905) LET
  905 FORMAT(A)
      IF(LET.EQ.'N' .OR. LET.EQ.'n') RETURN
C
C     HANDLE DOUBLY DEGENERATE SETS
C
      WRITE(IW,910)
  910 FORMAT(1X,'ARE THERE ANY DOUBLY DEGENERATE LEVELS? Y/N>',$)
      READ(IR,905) LET
      IF(LET.EQ.'N'  .OR.  LET.EQ.'n') GO TO 500
      WRITE(IW,920)
  920 FORMAT(1X,'ENTER TWO AO INDICES, THE FIRST OF WHICH WILL',
     *   ' CONTRIBUTE TO THE'/1X,'X SUBSPECIES ONLY, THE SECOND OF',
     *   ' WHICH IS USED IN THE Y SUBSPECIES ONLY'/1X,'>',$)
      READ(IR,*) II,JJ
      WRITE(IW,930)
  930 FORMAT(1X,'YOU MUST NOW ENTER DEGENERATE MO PAIRS, ONE PAIR AT',
     *       1X,'A TIME, ENTERING MO INDICES AS 0 AND 0 TO QUIT.')
C
C     LOOP OVER ALL DEGENERATE SETS
C
  200 CONTINUE
      WRITE(IW,940)
  940 FORMAT(1X,'MO PAIR >',$)
      READ(IR,*) LL,MM
      IF(LL+MM.EQ.0) GO TO 500
      V(1,1) = VEC(II,LL)
      V(2,1) = VEC(JJ,LL)
      V(1,2) = VEC(II,MM)
      V(2,2) = VEC(JJ,MM)
      CALL ROT2X2(V,W)
      DO 230 I=1,NAO
         DO 220 J=1,2
            TEMP(J) = VEC(I,LL)*W(1,J) + VEC(I,MM)*W(2,J)
  220    CONTINUE
         VEC(I,LL)=TEMP(1)
         VEC(I,MM)=TEMP(2)
  230 CONTINUE
      GO TO 200
C
C     HANDLE TRIPLE DEGENENERACIES
C
  500 CONTINUE
      WRITE(IW,960)
  960 FORMAT(1X,'Are there any T2 degenerate levels? Y/N >',$)
      READ(IR,905) LET
      IF(LET.EQ.'N'  .OR. LET.EQ.'n') RETURN
      WRITE(IW,970)
  970 FORMAT(1X,'ENTER 3 AO INDICES, WHICH WILL CONTRIBUTE TO ONLY',
     *      'ONE OF THE'/1X,'X,Y, AND Z SUBSPECIES >',$)
      READ(IR,*) II,JJ,KK
      WRITE(IW,980)
  980 FORMAT(1X,'YOU MUST NOW ENTER THREE MO INDICES FOR EACH SET',
     *   ' OF TRIPLY'/1X,'DEGENERATE MO-S, ALL 0''S TO QUIT')
C
  520 CONTINUE
      WRITE(IW,990)
  990 FORMAT(1X,'MO TRIPLET >',$)
      READ(IR,*) LL,MM,NN
      IF(LL+MM+NN.EQ.0) GO TO 700
      T(1,1)=VEC(II,LL)
      T(2,1)=VEC(JJ,LL)
      T(3,1)=VEC(KK,LL)
      T(1,2)=VEC(II,MM)
      T(2,2)=VEC(JJ,MM)
      T(3,2)=VEC(KK,MM)
      T(1,3)=VEC(II,NN)
      T(2,3)=VEC(JJ,NN)
      T(3,3)=VEC(KK,NN)
      CALL ROT3X3(T,U)
      DO 550 I=1,NAO
         DO 540 J=1,3
            TEMP(J) = VEC(I,LL)*U(1,J) + VEC(I,MM)*U(2,J)
     *                                 + VEC(I,NN)*U(3,J)
  540    CONTINUE
         VEC(I,LL)=TEMP(1)
         VEC(I,MM)=TEMP(2)
         VEC(I,NN)=TEMP(3)
  550 CONTINUE
      GO TO 520
C
  700 CONTINUE
      RETURN
      END
C     **********************
      SUBROUTINE ROT2X2(V,W)
C     **********************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION V(2,2),W(2,2)
      DATA ONE/1.0D0/
C
C        RETURN THE MATRIX W WHICH ROTATES V INTO
C        DIAGONAL FORM, VW=AI, A CHOSEN TO PRESERVE LENGTH.
C
      A = V(1,1)/SQRT(V(1,1)**2+V(1,2)**2)
      B = SQRT(ONE-A*A)
      W(1,1)=A
      W(2,1)=-B
      W(1,2)=B
      W(2,2)=A
      RETURN
      END
C     **********************
      SUBROUTINE ROT3X3(T,U)
C     **********************
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(9,9),B(9),U(3,3),T(3,3)
C--   DIMENSION WRK(9)
      DATA ZERO,ONE/0.0D0,1.0D0/
C
C        RETURN THE MATRIX U WHICH ROTATES T INTO
C        A DIAGONAL MATRIX.
C
      DO 110 I=1,9
         DO 100 J=1,9
            A(J,I)=ZERO
  100    CONTINUE
  110 CONTINUE
C
      A(1,1)=T(1,1)
      A(1,4)=T(1,2)
      A(1,7)=T(1,3)
      B(1)=ONE
      A(2,2)=T(1,1)
      A(2,5)=T(1,2)
      A(2,8)=T(1,3)
      B(2)=-ONE
      A(3,3)=T(1,1)
      A(3,6)=T(1,2)
      A(3,9)=T(1,3)
      B(3)=ZERO
      A(4,1)=T(2,1)
      A(4,4)=T(2,2)
      A(4,7)=T(2,3)
      B(4)=-ONE
      A(5,2)=T(2,1)
      A(5,5)=T(2,2)
      A(5,8)=T(2,3)
      B(5)=ZERO
      A(6,3)=T(2,1)
      A(6,6)=T(2,2)
      A(6,9)=T(2,3)
      B(6)=-ONE
      A(7,1)=T(3,1)
      A(7,4)=T(3,2)
      A(7,7)=T(3,3)
      B(7)=ZERO
      A(8,2)=T(3,1)
      A(8,5)=T(3,2)
      A(8,8)=T(3,3)
      B(8)=ONE
      A(9,3)=T(3,1)
      A(9,6)=T(3,2)
      A(9,9)=T(3,3)
      B(9)=ONE
      CALL PRTMAT(A,9)
C--   CALL LEQT1F(A,1,9,9,B,0,WRK,IER)
C     CALL PRTMAT(B,3)
      DO 480 I=1,3
         DO 470 J=1,3
            SUM=ZERO
            DO 460 K=1,3
               SUM=SUM+T(I,K)*B(3*(K-1)+J)
  460       CONTINUE
            U(I,J)=SUM
  470    CONTINUE
  480 CONTINUE
      CALL PRTMAT(U,3)
      VNORM = SQRT(B(1)**2+B(4)**2+B(7)**2)
      VNORM = ONE/VNORM
      U(1,1)=B(1)*VNORM
      U(2,1)=B(4)*VNORM
      U(3,1)=B(7)*VNORM
      VNORM = SQRT(B(2)**2+B(5)**2+B(8)**2)
      VNORM = ONE/VNORM
      U(1,2)=B(2)*VNORM
      U(2,2)=B(5)*VNORM
      U(3,2)=B(8)*VNORM
      VNORM = SQRT(B(3)**2+B(6)**2+B(9)**2)
      VNORM = ONE/VNORM
      U(1,3)=B(3)*VNORM
      U(2,3)=B(6)*VNORM
      U(3,3)=B(9)*VNORM
      CALL PRTMAT(U,3)
      DOT12=ZERO
      DOT13=ZERO
      DOT23=ZERO
      DO 500 I=1,3
         DOT12=DOT12+U(I,1)*U(I,2)
         DOT13=DOT13+U(I,1)*U(I,3)
         DOT23=DOT23+U(I,2)*U(I,3)
  500 CONTINUE
      WRITE(6,900) DOT12,DOT13,DOT23
  900 FORMAT(1X,'DOTS=',3E20.8)
      RETURN
      END
      SUBROUTINE PRTMAT(X,N)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION X(N,N)
      DO 120 I=1,N
         WRITE(6,900) I,(X(I,J),J=1,N)
  120 CONTINUE
      RETURN
  900 FORMAT(1X,I2,1X,9F8.4)
      END
